<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
	PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="mapper.carpedm.board">

	<!-- notice_board 페이지 select문 -->
	<select id="n_board" resultType="NoticeBoardDTO"
		parameterType="NoticeBoardDTO">
		SELECT * FROM (
		SELECT rownum rnum, n1.* FROM (
		SELECT notice.*,
		library.lb_name, member.m_name
		FROM notice
		INNER JOIN LIBRARY ON
		notice.lb_id = library.lb_id
		INNER JOIN MEMBER ON notice.m_pid =
		member.m_pid
		WHERE n_opt = 0
		<if test="search != '' and search != null">
			<if test="type == '제목'">
				AND N_TITLE LIKE '%' || #{search} || '%'
			</if>
			<if test="type == '제목 내용'">
				AND (N_TITLE LIKE '%' || #{search} || '%' OR N_CONTENT
				LIKE '%' || #{search} || '%')
			</if>
			<if test="type == '내용'">
				AND N_CONTENT LIKE '%' || #{search} || '%'
			</if>
			<if test="type == '도서관'">
				AND LB_NAME LIKE '%' || #{search} || '%'
			</if>
		</if>
		ORDER BY n_id DESC
		) n1
		) n2
		where rnum &gt;= ${startRow} and rnum &lt;=	${endRow}
	</select>

	<!-- notice_board 페이지 글쓰기 버튼을 위해 로그인된 아이디 관리자인지 아닌지 확인 -->
	<select id="member_pid" resultType="MemberDTO"
		parameterType="String">
		SELECT *
		FROM MEMBER
		where m_pid = ${_parameter}
	</select>

	<delete id="notice_delete" parameterType="int">
		DELETE FROM notice
		WHERE N_ID = ${_parameter}
	</delete>

	<update id="updateNotice" parameterType="int">
		UPDATE notice SET
		N_VIEWCOUNT = N_VIEWCOUNT + 1 WHERE N_ID = #{n_id}
	</update>

	<!-- notice_detail/notice_update/QnA_update/QnA_detail/QnA_reply_write 페이지 -->
	<select id="notice_nid" resultType="NoticeBoardDTO"
		parameterType="NoticeBoardDTO">
		SELECT n.*, m.M_NAME, l.LB_NAME
		FROM notice n
		JOIN member
		m ON n.M_PID = m.M_PID
		JOIN library l ON n.LB_ID = l.LB_ID
		WHERE n.N_ID
		= #{n_id}
	</select>

	<!-- notice_update/QnA_update/QnA_reply_write 페이지 도서관 값 불러오기 -->
	<select id="library_nid" resultType="NoticeBoardDTO"
		parameterType="NoticeBoardDTO">
		SELECT *
		FROM LIBRARY
		WHERE LB_ID &lt;&gt; #{n_id}
	</select>

	<!-- notice_write/QnA_write/wishbook_add 페이지 도서관 값 불러오기 -->
	<select id="library_list" resultType="LibraryDTO">
		SELECT *
		FROM LIBRARY
	</select>




	<!-- notice_write 페이지 로그인된 사람 데이터 불러오기 -->
	<select id="login_mpid" resultType="NoticeBoardDTO"
		parameterType="String">
		SELECT * FROM member where
		M_PID = #{_parameter}
	</select>

	<!-- notice_write 페이지 로그인된 사람 데이터 불러오기 -->
	<update id="no_update" parameterType="NoticeBoardDTO">
		update notice set
		N_TITLE =
		#{n_title}
		, LB_ID = #{lb_id}
		, N_CONTENT = #{n_content}
		where N_ID =
		#{n_id}
	</update>

	<insert id="no_insert" parameterType="NoticeBoardDTO">
		insert into notice (
		N_ID,
		LB_ID,
		N_OPT,
		N_TITLE,
		N_CONTENT,
		N_DATE,
		N_VIEWCOUNT,
		M_PID
		) values (
		notice_seq.NEXTVAL,
		#{lb_id},
		0,
		#{n_title},
		#{n_content},
		sysdate,
		0,
		#{m_pid}
		)
	</insert>

<!-- 	<resultMap id="resCountResult" type="HashMap"> -->
<!-- 		<result property="count" column="count(*)" /> -->
<!-- 	</resultMap> -->


<!-- notice_board 페이지 게시물 총 개수 -->
	<select id="NresultCount" resultType="int" parameterType="NoticeBoardDTO">
		select count(*) from notice
		where N_OPT = 0
	</select>

<!-- QnA_board 페이지 게시물 총 개수 -->
	<select id="QresultCount" resultType="int" parameterType="NoticeBoardDTO">
		select count(*) from notice
		where N_OPT = 1 or N_OPT = 2
	</select>
	
	
	<!-- QnA_board 페이지 -->
	<select id="Q_board" resultType="NoticeBoardDTO"
		parameterType="hashmap">
		select * from (
		select rownum
		rnum, n1.* from (
		with notice_recu (lv,
		n_id, n_opt, n_title, m_pid,
		n_date, n_parent_id,
		m_name, n_viewcount,
		n_content) as (
		select
		1 as lv,
		N.n_id,
		N.n_opt, N.n_title, N.m_pid,
		N.n_date, N.n_parent_id, M.m_name, N.n_viewcount, N.n_content
		from
		NOTICE N
		left outer join MEMBER M on N.m_pid = M.m_pid
		where
		N.n_parent_id is null
		union all
		select
		nr.lv + 1 as lv,
		n.n_id, n.n_opt,
		n.n_title, n.m_pid, n.n_date, n.n_parent_id, m.m_name, n.n_viewcount,
		n.n_content
		from notice_recu nr
		left outer join notice n on
		n.n_parent_id = nr.n_id
		left outer join member m on n.m_pid = m.m_pid
		where n.n_parent_id is
		not null)
		search depth first by n_id desc set
		sort_n_id
		select * from notice_recu
		where (n_opt = 1 or n_opt = 2)
		<if test="search != '' and search != null">
			<if test="type == '제목'">
				AND N_TITLE LIKE '%' || #{search} || '%'
			</if>
			<if test="type == '제목 내용'">
				AND (N_TITLE LIKE '%' || #{search} || '%' OR N_CONTENT
				LIKE '%' || #{search} || '%')
			</if>
			<if test="type == '내용'">
				AND N_CONTENT LIKE '%' || #{search} || '%'
			</if>
		</if>
		order by
		sort_n_id
		) n1
		) n2
		where rnum &gt;= ${startRow} and rnum &lt;=	${endRow}
	</select>

	<!-- QnA인서트 -->
	<insert id="QnA_reinsert" parameterType="NoticeBoardDTO">
		insert into notice (
		N_ID,
		LB_ID,
		N_OPT,
		N_TITLE,
		N_CONTENT,
		N_DATE,
		N_VIEWCOUNT,
		M_PID,
		N_PARENT_ID
		) values (
		notice_seq.NEXTVAL,
		#{lb_id},
		#{n_opt},
		#{n_title},
		#{n_content},
		sysdate,
		0,
		#{m_pid},
		#{n_parent_id}
		)
	</insert>


	<!-- QnA_write 페이지 도서관 값 불러오기 -->
	<select id="Q_write" resultType="NoticeBoardDTO">
		library_nid
	</select>

	<!-- QnA_write 페이지 도서관 값 불러오기 -->
	<update id="QnA_update" parameterType="NoticeBoardDTO">
		update notice set
		N_TITLE =
		#{n_title}
		, LB_ID = #{lb_id}
		, N_CONTENT = #{n_content}
		where N_ID
		=#{n_id}
	</update>

	<!-- QnA_write 페이지 인서트 -->
	<insert id="QnA_insert" parameterType="NoticeBoardDTO">
		insert into notice
		(
		N_ID
		,
		N_OPT
		, LB_ID
		, N_TITLE
		, N_CONTENT
		, N_VIEWCOUNT
		, N_DATE
		, M_PID
		)
		values(
		notice_seq.NEXTVAL
		, #{n_opt}
		, #{lb_id}
		, #{n_title}
		, #{n_content}
		, 0
		,
		sysdate
		, #{m_pid}
		)
	</insert>


	<!-- wishbook_add 페이지 도서관 값 불러오기 -->
	<select id="libry" resultType="LibraryDTO">
		SELECT *
		FROM LIBRARY
	</select>

	<!-- wishbook_add 페이지 인서트 -->
	<insert id="wishbook_add_insert" parameterType="WishlistDTO">
		INSERT INTO
		wishlist
		(W_ID,
		LB_ID,
		W_TITLE,
		W_AUTHOR,
		W_PUBYEAR,
		W_CONTENT,
		W_PUBLISHER,
		W_NAME,
		W_TEL,
		M_PID,
		W_STATE,
		W_DATE)
		VALUES(
		wishlist_seq.NEXTVAL,
		#{lb_id},
		#{w_title},
		#{w_author},
		#{w_pubyear},
		#{w_content},
		#{w_publisher},
		#{w_name},
		#{w_tel},
		#{m_pid},
		'0',
		SYSDATE
		)
	</insert>


</mapper>